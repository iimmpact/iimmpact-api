/*
 * IIMMPACT API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2020-09-14T13:01:14Z
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.IimmpactApi);
  }
}(this, function(expect, IimmpactApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('TopupResponseData', function() {
      beforeEach(function() {
        instance = new IimmpactApi.TopupResponseData();
      });

      it('should create an instance of TopupResponseData', function() {
        // TODO: update the code to test TopupResponseData
        expect(instance).to.be.a(IimmpactApi.TopupResponseData);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property account (base name: "account")', function() {
        // TODO: update the code to test the property account
        expect(instance).to.have.property('account');
        // expect(instance.account).to.be(expectedValueLiteral);
      });

      it('should have the property product (base name: "product")', function() {
        // TODO: update the code to test the property product
        expect(instance).to.have.property('product');
        // expect(instance.product).to.be(expectedValueLiteral);
      });

      it('should have the property amount (base name: "amount")', function() {
        // TODO: update the code to test the property amount
        expect(instance).to.have.property('amount');
        // expect(instance.amount).to.be(expectedValueLiteral);
      });

      it('should have the property sn (base name: "sn")', function() {
        // TODO: update the code to test the property sn
        expect(instance).to.have.property('sn');
        // expect(instance.sn).to.be(expectedValueLiteral);
      });

      it('should have the property cost (base name: "cost")', function() {
        // TODO: update the code to test the property cost
        expect(instance).to.have.property('cost');
        // expect(instance.cost).to.be(expectedValueLiteral);
      });

      it('should have the property balance (base name: "balance")', function() {
        // TODO: update the code to test the property balance
        expect(instance).to.have.property('balance');
        // expect(instance.balance).to.be(expectedValueLiteral);
      });

      it('should have the property remarks (base name: "remarks")', function() {
        // TODO: update the code to test the property remarks
        expect(instance).to.have.property('remarks');
        // expect(instance.remarks).to.be(expectedValueLiteral);
      });

      it('should have the property refid (base name: "refid")', function() {
        // TODO: update the code to test the property refid
        expect(instance).to.have.property('refid');
        // expect(instance.refid).to.be(expectedValueLiteral);
      });

      it('should have the property timestamp (base name: "timestamp")', function() {
        // TODO: update the code to test the property timestamp
        expect(instance).to.have.property('timestamp');
        // expect(instance.timestamp).to.be(expectedValueLiteral);
      });

    });
  });

}));
