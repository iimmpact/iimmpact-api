/*
 * IIMMPACT API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2020-09-14T13:01:14Z
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.IimmpactApi);
  }
}(this, function(expect, IimmpactApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new IimmpactApi.TransactionHistoryApi();
  });

  describe('(package)', function() {
    describe('TransactionHistoryApi', function() {
      describe('v1BalanceStatementGet', function() {
        it('should call v1BalanceStatementGet successfully', function(done) {
          // TODO: uncomment, update parameter values for v1BalanceStatementGet call and complete the assertions
          /*
          var _date = "_date_example";
          var opts = {};
          opts.limit = "limit_example";
          opts.remarks = "remarks_example";
          opts.sort = "sort_example";
          opts.type = "type_example";
          opts.direction = "direction_example";
          opts.page = "page_example";
          opts.amount = "amount_example";

          instance.v1BalanceStatementGet(_date, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IimmpactApi.BalanceStatementResponse);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(IimmpactApi.BalanceStatementResponseData);
                expect(data.time).to.be.a('string');
                expect(data.time).to.be("");
                expect(data.amount).to.be.a('number');
                expect(data.amount).to.be();
                expect(data.balance).to.be.a('number');
                expect(data.balance).to.be();
                expect(data.remarks).to.be.a('string');
                expect(data.remarks).to.be("");

                      }
            }
            expect(data.links).to.be.a(IimmpactApi.BalanceStatementResponseLinks);
                  expect(data.links.first).to.be.a('string');
              expect(data.links.first).to.be("");
              expect(data.links.last).to.be.a('string');
              expect(data.links.last).to.be("");
              expect(data.links.prev).to.be.a('string');
              expect(data.links.prev).to.be("");
              expect(data.links.next).to.be.a('string');
              expect(data.links.next).to.be("");
            expect(data.meta).to.be.a(IimmpactApi.BalanceStatementResponseMeta);
                  expect(data.meta.currentPage).to.be.a('number');
              expect(data.meta.currentPage).to.be(0);
              expect(data.meta.from).to.be.a('number');
              expect(data.meta.from).to.be(0);
              expect(data.meta.lastPage).to.be.a('number');
              expect(data.meta.lastPage).to.be(0);
              expect(data.meta.path).to.be.a('string');
              expect(data.meta.path).to.be("");
              expect(data.meta.perPage).to.be.a('number');
              expect(data.meta.perPage).to.be(0);
              expect(data.meta.to).to.be.a('number');
              expect(data.meta.to).to.be(0);
              expect(data.meta.total).to.be.a('number');
              expect(data.meta.total).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1TransactionsGet', function() {
        it('should call v1TransactionsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for v1TransactionsGet call and complete the assertions
          /*
          var _date = "_date_example";
          var opts = {};
          opts.refid = "refid_example";
          opts.limit = "limit_example";
          opts.sort = "sort_example";
          opts.offset = "offset_example";
          opts.direction = "direction_example";
          opts.status = "status_example";
          opts.account = "account_example";
          opts.acceptEncoding = "acceptEncoding_example";
          opts.sn = "sn_example";
          opts.product = "product_example";

          instance.v1TransactionsGet(_date, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IimmpactApi.TransactionsResponse);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(IimmpactApi.TransactionsResponseData);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.entryDate).to.be.a('string');
                expect(data.entryDate).to.be("");
                expect(data.product).to.be.a(IimmpactApi.TransactionsResponseProduct);
                      expect(data.product.code).to.be.a('string');
                  expect(data.product.code).to.be("");
                  expect(data.product.name).to.be.a('string');
                  expect(data.product.name).to.be("");
                expect(data.amount).to.be.a('number');
                expect(data.amount).to.be();
                expect(data.topupNumber).to.be.a('string');
                expect(data.topupNumber).to.be("");
                expect(data.sender).to.be.a('string');
                expect(data.sender).to.be("");
                expect(data.memberId).to.be.a('number');
                expect(data.memberId).to.be(0);
                expect(data.status).to.be.a(IimmpactApi.TransactionsResponseStatus);
                      expect(data.status.code).to.be.a('number');
                  expect(data.status.code).to.be(0);
                  expect(data.status.text).to.be.a('string');
                  expect(data.status.text).to.be("");
                  expect(data.status._date).to.be.a('string');
                  expect(data.status._date).to.be("");
                expect(data.balance).to.be.a(IimmpactApi.TransactionsResponseBalance);
                      expect(data.balance.prev).to.be.a('number');
                  expect(data.balance.prev).to.be();
                  expect(data.balance._new).to.be.a('number');
                  expect(data.balance._new).to.be();
                expect(data.price).to.be.a('number');
                expect(data.price).to.be();
                expect(data.sn).to.be.a('string');
                expect(data.sn).to.be("");
                expect(data.remarks).to.be.a('string');
                expect(data.remarks).to.be("");
                expect(data.refId).to.be.a('string');
                expect(data.refId).to.be("");

                      }
            }
            expect(data.meta).to.be.a(IimmpactApi.TransactionsResponseMeta);
                  expect(data.meta.totalAmount).to.be.a('number');
              expect(data.meta.totalAmount).to.be();
              expect(data.meta.totalPrice).to.be.a('number');
              expect(data.meta.totalPrice).to.be();
              expect(data.meta.transactionCount).to.be.a('string');
              expect(data.meta.transactionCount).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
