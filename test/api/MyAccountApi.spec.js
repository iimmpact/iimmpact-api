/*
 * IIMMPACT API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2020-09-14T13:01:14Z
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.IimmpactApi);
  }
}(this, function(expect, IimmpactApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new IimmpactApi.MyAccountApi();
  });

  describe('(package)', function() {
    describe('MyAccountApi', function() {
      describe('v1AuthChangePasswordPost', function() {
        it('should call v1AuthChangePasswordPost successfully', function(done) {
          // TODO: uncomment, update parameter values for v1AuthChangePasswordPost call and complete the assertions
          /*
          var newPasswordRequest = new IimmpactApi.ChangePasswordRequest();
          newPasswordRequest.oldPassword = "";
          newPasswordRequest.newPassword = "";

          instance.v1AuthChangePasswordPost(newPasswordRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IimmpactApi.InlineResponse2001);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1AuthNewPasswordChallengePost', function() {
        it('should call v1AuthNewPasswordChallengePost successfully', function(done) {
          // TODO: uncomment, update parameter values for v1AuthNewPasswordChallengePost call and complete the assertions
          /*
          var newPasswordRequest = new IimmpactApi.NewPasswordRequest();
          newPasswordRequest.username = "";
          newPasswordRequest.oldPassword = "";
          newPasswordRequest.newPassword = "";
          newPasswordRequest.session = "";

          instance.v1AuthNewPasswordChallengePost(newPasswordRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IimmpactApi.NewPasswordResponses);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('v1BalanceGet', function() {
        it('should call v1BalanceGet successfully', function(done) {
          // TODO: uncomment v1BalanceGet call and complete the assertions
          /*

          instance.v1BalanceGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IimmpactApi.InlineResponse200);
            expect(data.data).to.be.a(IimmpactApi.InlineResponse200Data);
                  expect(data.data.account).to.be.a('string');
              expect(data.data.account).to.be("");
              expect(data.data.name).to.be.a('string');
              expect(data.data.name).to.be("");
              expect(data.data.balance).to.be.a('number');
              expect(data.data.balance).to.be();
              expect(data.data.level).to.be.a('string');
              expect(data.data.level).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
