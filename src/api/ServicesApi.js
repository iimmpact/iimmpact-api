/*
 * IIMMPACT API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2020-09-14T13:01:14Z
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BillPresentmentResponse', 'model/NetworkStatusResponse', 'model/TopupRequest', 'model/TopupResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BillPresentmentResponse'), require('../model/NetworkStatusResponse'), require('../model/TopupRequest'), require('../model/TopupResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.IimmpactApi) {
      root.IimmpactApi = {};
    }
    root.IimmpactApi.ServicesApi = factory(root.IimmpactApi.ApiClient, root.IimmpactApi.BillPresentmentResponse, root.IimmpactApi.NetworkStatusResponse, root.IimmpactApi.TopupRequest, root.IimmpactApi.TopupResponse);
  }
}(this, function (ApiClient, BillPresentmentResponse, NetworkStatusResponse, TopupRequest, TopupResponse) {
  'use strict';

  /**
   * Services service.
   * @module api/ServicesApi
   * @version 2020-09-14T13:01:14Z
   */

  /**
   * Constructs a new ServicesApi. 
   * @alias module:api/ServicesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function (apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the v1BillPresentmentGet operation.
     * @callback module:api/ServicesApi~v1BillPresentmentGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BillPresentmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} account 
     * @param {Object} opts Optional parameters
     * @param {String} opts.accountName 
     * @param {String} opts.product 
     * @param {module:api/ServicesApi~v1BillPresentmentGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BillPresentmentResponse}
     */
    this.v1BillPresentmentGet = function (account, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling v1BillPresentmentGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'account_name': opts['accountName'],
        'account': account,
        'product': opts['product'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['SSO'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = BillPresentmentResponse;

      return this.apiClient.callApi(
        '/v1/bill-presentment', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1NetworkstatusGet operation.
     * @callback module:api/ServicesApi~v1NetworkstatusGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} product 
     * @param {module:api/ServicesApi~v1NetworkstatusGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkStatusResponse}
     */
    this.v1NetworkstatusGet = function (product, callback) {
      var postBody = null;

      // verify the required parameter 'product' is set
      if (product === undefined || product === null) {
        throw new Error("Missing the required parameter 'product' when calling v1NetworkstatusGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'product': product,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['SSO'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = NetworkStatusResponse;

      return this.apiClient.callApi(
        '/v1/networkstatus', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1TopupPost operation.
     * @callback module:api/ServicesApi~v1TopupPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TopupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/TopupRequest} topupRequest 
     * @param {module:api/ServicesApi~v1TopupPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TopupResponse}
     */

    this.v1TopupPost = function (topupRequest, callback) {
      var postBody = topupRequest;

      // verify the required parameter 'topupRequest' is set
      if (topupRequest === undefined || topupRequest === null) {
        throw new Error("Missing the required parameter 'topupRequest' when calling v1TopupPost");
      }
      var pathParams = {};
      var queryParams = {};
      var collectionQueryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['SSO'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TopupResponse;
      return this.apiClient.callApi('/v1/topup', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback);
    }
    this.v1TopupPostCallback = function (topupRequest, callback) {
      var self = this;
      this.v1TopupPost(topupRequest, function (error, data, response) {
        if (data !== null && data !== '') {
          var tmp = data;
          if (tmp.data.status !== 'Failed' && tmp.data.status !== 'Succesful') {
            self.v1TopupPostCallback()
          }
          else{
            callback(error,tmp)
          }
        }
        else {
          var responseError = error.response.body;
          callback(responseError, data);
        }
      });
    }
  }
  return exports;
}));
