/*
 * IIMMPACT API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2020-09-14T13:01:14Z
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DrivingLicenseRespone', 'model/DrivingTestRespone', 'model/JPJSummonsResponse', 'model/VehicleExpiryResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DrivingLicenseRespone'), require('../model/DrivingTestRespone'), require('../model/JPJSummonsResponse'), require('../model/VehicleExpiryResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.IimmpactApi) {
      root.IimmpactApi = {};
    }
    root.IimmpactApi.JPJRecordsApi = factory(root.IimmpactApi.ApiClient, root.IimmpactApi.DrivingLicenseRespone, root.IimmpactApi.DrivingTestRespone, root.IimmpactApi.JPJSummonsResponse, root.IimmpactApi.VehicleExpiryResponse);
  }
}(this, function(ApiClient, DrivingLicenseRespone, DrivingTestRespone, JPJSummonsResponse, VehicleExpiryResponse) {
  'use strict';

  /**
   * JPJRecords service.
   * @module api/JPJRecordsApi
   * @version 2020-09-14T13:01:14Z
   */

  /**
   * Constructs a new JPJRecordsApi. 
   * @alias module:api/JPJRecordsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the v1JpjDrivingLicenseGet operation.
     * @callback module:api/JPJRecordsApi~v1JpjDrivingLicenseGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DrivingLicenseRespone} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} idNo 
     * @param {String} idType 
     * @param {Object} opts Optional parameters
     * @param {String} opts.captcha 
     * @param {module:api/JPJRecordsApi~v1JpjDrivingLicenseGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DrivingLicenseRespone}
     */
    this.v1JpjDrivingLicenseGet = function(idNo, idType, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'idNo' is set
      if (idNo === undefined || idNo === null) {
        throw new Error("Missing the required parameter 'idNo' when calling v1JpjDrivingLicenseGet");
      }

      // verify the required parameter 'idType' is set
      if (idType === undefined || idType === null) {
        throw new Error("Missing the required parameter 'idType' when calling v1JpjDrivingLicenseGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'id_no': idNo,
        'id_type': idType,
        'captcha': opts['captcha'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['SSO'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DrivingLicenseRespone;

      return this.apiClient.callApi(
        '/v1/jpj/driving-license', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1JpjDrivingTestResultsGet operation.
     * @callback module:api/JPJRecordsApi~v1JpjDrivingTestResultsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DrivingTestRespone} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} idNo 
     * @param {String} idType 
     * @param {Object} opts Optional parameters
     * @param {String} opts.captcha 
     * @param {module:api/JPJRecordsApi~v1JpjDrivingTestResultsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DrivingTestRespone}
     */
    this.v1JpjDrivingTestResultsGet = function(idNo, idType, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'idNo' is set
      if (idNo === undefined || idNo === null) {
        throw new Error("Missing the required parameter 'idNo' when calling v1JpjDrivingTestResultsGet");
      }

      // verify the required parameter 'idType' is set
      if (idType === undefined || idType === null) {
        throw new Error("Missing the required parameter 'idType' when calling v1JpjDrivingTestResultsGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'id_no': idNo,
        'id_type': idType,
        'captcha': opts['captcha'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['SSO'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DrivingTestRespone;

      return this.apiClient.callApi(
        '/v1/jpj/driving-test-results', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1JpjMotorVehicleExpiryGet operation.
     * @callback module:api/JPJRecordsApi~v1JpjMotorVehicleExpiryGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VehicleExpiryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} idNo 
     * @param {String} idType 
     * @param {String} vehicleNo 
     * @param {Object} opts Optional parameters
     * @param {String} opts.captcha 
     * @param {module:api/JPJRecordsApi~v1JpjMotorVehicleExpiryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VehicleExpiryResponse}
     */
    this.v1JpjMotorVehicleExpiryGet = function(idNo, idType, vehicleNo, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'idNo' is set
      if (idNo === undefined || idNo === null) {
        throw new Error("Missing the required parameter 'idNo' when calling v1JpjMotorVehicleExpiryGet");
      }

      // verify the required parameter 'idType' is set
      if (idType === undefined || idType === null) {
        throw new Error("Missing the required parameter 'idType' when calling v1JpjMotorVehicleExpiryGet");
      }

      // verify the required parameter 'vehicleNo' is set
      if (vehicleNo === undefined || vehicleNo === null) {
        throw new Error("Missing the required parameter 'vehicleNo' when calling v1JpjMotorVehicleExpiryGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'id_no': idNo,
        'id_type': idType,
        'captcha': opts['captcha'],
        'vehicle_no': vehicleNo,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['SSO'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = VehicleExpiryResponse;

      return this.apiClient.callApi(
        '/v1/jpj/motor-vehicle-expiry', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1JpjSummonsGet operation.
     * @callback module:api/JPJRecordsApi~v1JpjSummonsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JPJSummonsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} idNo 
     * @param {String} idType 
     * @param {Object} opts Optional parameters
     * @param {String} opts.captcha 
     * @param {module:api/JPJRecordsApi~v1JpjSummonsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JPJSummonsResponse}
     */
    this.v1JpjSummonsGet = function(idNo, idType, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'idNo' is set
      if (idNo === undefined || idNo === null) {
        throw new Error("Missing the required parameter 'idNo' when calling v1JpjSummonsGet");
      }

      // verify the required parameter 'idType' is set
      if (idType === undefined || idType === null) {
        throw new Error("Missing the required parameter 'idType' when calling v1JpjSummonsGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'id_no': idNo,
        'id_type': idType,
        'captcha': opts['captcha'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['SSO'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = JPJSummonsResponse;

      return this.apiClient.callApi(
        '/v1/jpj/summons', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
